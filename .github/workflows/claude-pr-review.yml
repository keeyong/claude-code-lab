name: Claude Slash Review

on:
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  review_on_comment:
    # PR에 달린 코멘트이고, 본문이 "/claude review"로 시작할 때만 실행
    if: ${{ github.event.issue.pull_request != null && startsWith(github.event.comment.body, '/claude review') }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Gather PR context (title, body, changed files with patches)
        id: ctx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.issue.number }}"

          # PR 메타
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "${{ github.api_url }}/repos/${{ github.repository }}/pulls/$PR_NUMBER" > pr.json

          # PR 변경 파일 (최대 100개, 필요시 페이지네이션 확장 가능)
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "${{ github.api_url }}/repos/${{ github.repository }}/pulls/$PR_NUMBER/files?per_page=100" > files.json

          PR_TITLE=$(jq -r '.title' pr.json)
          PR_BODY=$(jq -r '.body // ""' pr.json)

          # 파일명 + 패치(일부 잘릴 수 있음)를 합쳐 Claude에 전달할 텍스트 구성
          # 너무 길어지는 것 방지(12k chars로 제한)
          CHANGES=$(jq -r '.[] | "### " + .filename + "\n```diff\n" + (.patch // "(no patch)") + "\n```"' files.json | head -n 200)
          CHANGES_TRIM=$(echo "$CHANGES" | awk 'BEGIN{RS=""; FS="\n"} {print}' | head -c 12000)

          {
            echo "PR_NUMBER=$PR_NUMBER"
            echo "PR_TITLE<<EOF"
            echo "$PR_TITLE"
            echo "EOF"
            echo "PR_BODY<<EOF"
            echo "$PR_BODY"
            echo "EOF"
            echo "PR_CHANGES<<EOF"
            echo "$CHANGES_TRIM"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Ask Claude for review
        id: claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # 프롬프트(리뷰 지침)
          read -r -d '' SYSTEM << 'EOS'
You are a meticulous senior code reviewer. Produce a concise, actionable review covering:
- correctness/bugs and edge cases
- security/privacy concerns
- performance issues
- readability/maintainability
- test gaps (propose specific tests)
Use bullets with concrete, file/line references when possible.
EOS

          read -r -d '' USERMSG << 'EOU'
PR Title:
${{ steps.ctx.outputs.PR_TITLE }}

PR Body:
${{ steps.ctx.outputs.PR_BODY }}

Changed files (with patches):
${{ steps.ctx.outputs.PR_CHANGES }}
EOU

          # Anthropic Messages API 호출
          JSON=$(jq -n \
            --arg sys "$SYSTEM" \
            --arg user "$USERMSG" \
            '{
              model: "claude-3-5-sonnet-20240620",
              max_tokens: 900,
              system: $sys,
              messages: [ {role:"user", content: $user} ]
            }')

          curl -s https://api.anthropic.com/v1/messages \
               -H "x-api-key: $ANTHROPIC_API_KEY" \
               -H "anthropic-version: 2023-06-01" \
               -H "content-type: application/json" \
               -d "$JSON" > claude.json

          TEXT=$(jq -r '.content[0].text // "(no response from Claude)"' claude.json)

          {
            echo "TEXT<<EOF"
            echo "$TEXT"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post review comment to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.ctx.outputs.PR_NUMBER }}"
          BODY="🤖 **Claude review** (triggered by \`/claude review\`):\n\n${{ steps.claude.outputs.TEXT }}"
          jq -n --arg body "$BODY" '{body:$body}' > body.json

          curl -s -X POST \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               -d @body.json \
               "${{ github.api_url }}/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" > /dev/null

      - name: React to the trigger comment (optional)
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_ID="${{ github.event.comment.id }}"
          curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d '{"content":"rocket"}' \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/$COMMENT_ID/reactions" > /dev/null
