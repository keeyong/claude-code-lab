name: Claude Commit (Slash Command, both comment types)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  commit_on_command:
    if: >
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        startsWith(github.event.comment.body, '/claude commit')
      ) || (
        github.event_name == 'pull_request_review_comment' &&
        startsWith(github.event.comment.body, '/claude commit')
      )
    runs-on: ubuntu-latest

    steps:
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq patch

      - name: Fetch PR info
        id: pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUM="${{ github.event.issue.number }}"
          else
            PR_NUM="${{ github.event.pull_request.number }}"
          fi
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN"                -H "Accept: application/vnd.github+json"                "${{ github.api_url }}/repos/${{ github.repository }}/pulls/$PR_NUM" > pr.json
          echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT
          echo "head_ref=$(jq -r '.head.ref' pr.json)" >> $GITHUB_OUTPUT
          echo "head_repo=$(jq -r '.head.repo.full_name' pr.json)" >> $GITHUB_OUTPUT
          echo "base_ref=$(jq -r '.base.ref' pr.json)" >> $GITHUB_OUTPUT

      - name: Check out PR head
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr.outputs.head_repo }}
          ref: ${{ steps.pr.outputs.head_ref }}
          fetch-depth: 0

      - name: Extract user request
        id: msg
        run: |
          RAW="${{ github.event.comment.body }}"
          ASK=$(echo "$RAW" | sed -E 's@^/claude[[:space:]]+commit:?[[:space:]]*@@')
          echo "ask<<EOF" >> $GITHUB_OUTPUT
          echo "$ASK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare repo snapshot (bounded context)
        id: ctx
        run: |
          TREE=$(git ls-files | head -n 400)
          BLOB_FILES="package.json next.config.js src/App.tsx src/App.jsx pages/_app.tsx pages/index.tsx app/page.tsx"
          for f in $BLOB_FILES; do
            if [ -f "$f" ]; then
              echo "### FILE: $f"
              echo '```'
              sed -n '1,300p' "$f"
              echo '```'
            fi
          done > blobs.txt
          echo "tree<<EOF" >> $GITHUB_OUTPUT
          echo "$TREE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "blobs<<EOF" >> $GITHUB_OUTPUT
          cat blobs.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Ask Claude for a unified diff patch
        id: claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          SYSTEM=$(cat <<'EOS'
You are an expert software engineer. Output ONLY a valid unified diff (git patch) against the current HEAD of this repo. No prose, no fences. Keep changes minimal, correct, and buildable. If adding files, include proper diff headers (new file mode, index, --- /dev/null, +++ path).
Constraints:
- Prefer editing existing entry points (e.g., pages/_app.tsx, pages/index.tsx, app/page.tsx, src/App.*).
- Do not modify lockfiles or workflows.
- Keep patch under ~500 lines.
EOS
)

          USER=$(cat <<'EOU'
User request:
${{ steps.msg.outputs.ask }}

Repo tree (truncated):
${{ steps.ctx.outputs.tree }}

Key files (truncated):
${{ steps.ctx.outputs.blobs }}
EOU
)

          JSON=$(jq -n             --arg sys "$SYSTEM"             --arg user "$USER"             '{
              model: "claude-3-5-sonnet-20240620",
              max_tokens: 1500,
              system: $sys,
              messages: [{ "role": "user", "content": $user }]
            }')

          curl -s https://api.anthropic.com/v1/messages                -H "x-api-key: $ANTHROPIC_API_KEY"                -H "anthropic-version: 2023-06-01"                -H "content-type: application/json"                -d "$JSON" > out.json

          jq -r '.content[0].text' out.json > patch.diff

          if ! grep -qE '^\+\+\+ ' patch.diff; then
            echo "Claude did not return a valid unified diff."
            echo "Response was:"
            sed -n '1,200p' patch.diff
            exit 1
          fi

      - name: Apply patch
        run: |
          git config user.name "claude-bot"
          git config user.email "claude-bot@example.com"
          git apply --whitespace=fix --reject patch.diff || {
            echo "::warning::Patch had rejects, attempting manual patch"
            patch -p1 < patch.diff || exit 1
          }
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes after patch."
            exit 1
          fi
          git add -A
          git commit -m "feat(claude): apply requested change via /claude commit"
          git push origin HEAD

      - name: Post top-level PR comment
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BODY="ðŸš€ Applied Claude-generated patch for:\n\n> ${{ steps.msg.outputs.ask }}\n\nIf build fails, reply with \`/claude commit: fix build errors\`."
          curl -s -X POST             -H "Authorization: Bearer $GITHUB_TOKEN"             -H "Accept: application/vnd.github+json"             -d @-             "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ steps.pr.outputs.pr_number }}/comments" <<EOF >/dev/null
{"body": "$BODY"}
EOF
